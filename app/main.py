import time
from datetime import datetime, timezone
import logging
from contextlib import asynccontextmanager
from typing import List, Optional
from fastapi import FastAPI, HTTPException, Depends, Query
from sqlalchemy.orm import Session
from prometheus_client import Counter, Histogram, generate_latest
from .auth import APIKeyManager, get_current_user, require_admin_access, require_write_access, require_read_access
from .database import get_db, engine
from .models import Base, APIKey, User
from .schemas import APIKeyListResponse, EventBatch, AnalyticsResponse, GenerateAPIKeyRequest, GenerateAPIKeyResponse, UserCreateRequest, UserResponse, UsersListResponse
from .crud import ingest_events, get_user_stats, get_ingestion_metrics
from .analytics import *
from .middleware import RateLimiter
from .models import Event 
import asyncio
import uuid
from logging.handlers import RotatingFileHandler, TimedRotatingFileHandler
import os
# –ú–æ–¥–µ–ª—ñ –ë–î
#Base.metadata.create_all(bind=engine)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
    log_dir = "logs"
    os.makedirs(log_dir, exist_ok=True)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π handler —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø–æ —Ä–∞–∑–º–µ—Ä—É
    file_handler = RotatingFileHandler(
        filename=os.path.join(log_dir, 'app.log'),
        maxBytes=10 * 1024 * 1024,  # 10 MB
        backupCount=5,  # –•—Ä–∞–Ω–∏—Ç—å 5 backup —Ñ–∞–π–ª–æ–≤
        encoding='utf-8'
    )
    
    # Handler –¥–ª—è –æ—à–∏–±–æ–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    error_handler = TimedRotatingFileHandler(
        filename=os.path.join(log_dir, 'errors.log'),
        when='W0',  # –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        backupCount=4,  # 4 –Ω–µ–¥–µ–ª–∏
        encoding='utf-8'
    )
    error_handler.setLevel(logging.ERROR)
    
    # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    file_handler.setFormatter(formatter)
    error_handler.setFormatter(formatter)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            file_handler,
            error_handler,
            logging.StreamHandler()  # Console output
        ]
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–∏–Ω–≥
setup_logging()
logger = logging.getLogger(__name__)

# –ú–µ—Ç—Ä–∏–∫–∏
EVENTS_INGESTED_COUNTER = Counter('events_ingested_total', 'Total ingested events')
EVENTS_PUBLISHED_COUNTER = Counter('events_published_nats_total', 'Total events published to NATS')
REQUEST_DURATION = Histogram('request_duration_seconds', 'Request duration')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–ª—é—á–µ–π (–û–î–ò–ù –†–ê–ó)
api_key_manager = APIKeyManager()


@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    logger.info("üöÄ Starting Event Analytics Service")
    
    # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ NATS (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    try:
        from .nats_client import nats_client
        await nats_client.connect()
        app.state.nats_enabled = nats_client.is_connected
        if nats_client.is_connected:
            logger.info("‚úÖ NATS integration enabled")
        else:
            logger.info("‚ÑπÔ∏è  NATS integration disabled")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è NATS setup failed: {e}")
        app.state.nats_enabled = False
    
    logger.info("‚úÖ Database tables created")
    yield
    
    # Shutdown
    logger.info("üõë Shutting down Event Analytics Service")
    try:
        from .nats_client import nats_client
        await nats_client.close()
    except:
        pass

app = FastAPI(
    title="Event Analytics Service",
    description="API –¥–ª—è –∑–±–æ—Ä—É —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –ø–æ–¥—ñ–π –∑ —Å–∏—Å—Ç–µ–º–æ—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó",
    version="1.0.0",
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)

# Rate Limiter
rate_limiter = RateLimiter(capacity=1000, refill_rate=100)

async def get_rate_limiter():
    return rate_limiter

# ==================== NATS UTILS ====================

async def publish_events_to_nats(events: List[Dict[str, Any]]) -> int:
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –≤ NATS"""
    try:
        from .nats_client import nats_client
        
        if not nats_client.is_connected:
            return 0
            
        published_count = 0
        for event in events:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è NATS
            nats_message = {
                "event_id": str(event.event_id),
                "occurred_at": event.occurred_at.isoformat(),
                "user_id": event.user_id,
                "event_type": event.event_type,
                "properties": event.properties,
                "published_at": datetime.now(timezone.utc).isoformat(),
                "source": "analytics_api"
            }
            
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ —Ä–∞–∑–Ω—ã–µ —Ç–æ–ø–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
            subject = f"events.{event.event_type}"
            success = await nats_client.publish_event(subject, nats_message)
            
            if success:
                published_count += 1
                EVENTS_PUBLISHED_COUNTER.inc()
        
        logger.info(f"üì§ Published {published_count}/{len(events)} events to NATS")
        return published_count
        
    except Exception as e:
        logger.error(f"Error publishing events to NATS: {str(e)}")
        return 0

# ==================== EVENT ENDPOINTS ====================

@app.post("/events", status_code=201)
async def post_events(
    events: EventBatch,
    db: Session = Depends(get_db),
    limiter: RateLimiter = Depends(get_rate_limiter),
    user: dict = Depends(require_write_access)
):
    """
    –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–¥—ñ–π –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
    
    - –í–∏–º–∞–≥–∞—î –ø—Ä–∞–≤–∞ **write**
    - –û–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Ç—ñ–≤
    - –ó–±–µ—Ä—ñ–≥–∞—î –≤ –ë–î —Ç–∞ –ø—É–±–ª—ñ–∫—É—î –≤ NATS
    """
    start_time = time.time()
    
    # Rate limiting
    if not limiter.consume(1):
        raise HTTPException(status_code=429, detail="Rate limit exceeded")
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –ë–î
        ingested_count = await ingest_events(db, events.events)
        duration = time.time() - start_time
        REQUEST_DURATION.observe(duration)
        EVENTS_INGESTED_COUNTER.inc(ingested_count)
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏—è –≤ NATS (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
        if ingested_count > 0:
            asyncio.create_task(publish_events_to_nats(events.events))
        
        logger.info(f"üìù User {user['user_id']} ingested {ingested_count} events in {duration:.3f}s")
        
        return {
            "status": "success", 
            "ingested": ingested_count,
            "total_received": len(events.events),
            "processing_time": f"{duration:.3f}s",
            "nats_enabled": getattr(app.state, 'nats_enabled', False)
        }
            
    except Exception as e:
        logger.error(f"Error ingesting events: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")

# ==================== USER ENDPOINTS ====================

@app.post("/users", status_code=201)
async def create_user(
    user_id: str = Query(..., description="User ID"),
    name: str = Query(..., description="User name"),
    email: str = Query(None, description="User email"),
    db: Session = Depends(get_db),
    user: dict = Depends(require_admin_access)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = db.query(User).filter(User.user_id == user_id).first()
        if existing_user:
            raise HTTPException(status_code=400, detail="User already exists")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = User(
            user_id=user_id,
            name=name,
            email=email,
            is_active=True
        )
        
        db.add(new_user)
        db.commit()
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ NATS
        try:
            from .nats_client import nats_client
            if nats_client.is_connected:
                user_event = {
                    "event_id": str(uuid.uuid4()),
                    "occurred_at": datetime.now(timezone.utc).isoformat(),
                    "user_id": user_id,
                    "event_type": "user_created",
                    "properties": {
                        "name": name,
                        "email": email,
                        "created_by": user['user_id']
                    },
                    "published_at": datetime.now(timezone.utc).isoformat()
                }
                await nats_client.publish_event("users.created", user_event)
        except Exception as e:
            logger.warning(f"Failed to publish user creation event: {e}")
        
        logger.info(f"Admin {user['user_id']} created user: {user_id}")
        
        return {
            "message": "‚úÖ User created successfully",
            "user_id": user_id,
            "name": name,
            "email": email
        }
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        logger.error(f"Error creating user: {str(e)}")
        raise HTTPException(status_code=500, detail="Error creating user")

@app.get("/users")
async def list_users(
    active_only: bool = Query(True, description="Show only active users"),
    db: Session = Depends(get_db),
    user: dict = Depends(require_admin_access)
):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        query = db.query(User)
        if active_only:
            query = query.filter(User.is_active == True)
            
        users = query.order_by(User.created_at.desc()).all()
        
        users_info = [
            {
                "user_id": u.user_id,
                "name": u.name,
                "email": u.email,
                "is_active": u.is_active,
                "created_at": u.created_at,
                "updated_at": u.updated_at
            }
            for u in users
        ]
        
        return {
            "total_users": len(users_info),
            "users": users_info
        }
        
    except Exception as e:
        logger.error(f"Error listing users: {str(e)}")
        raise HTTPException(status_code=500, detail="Error listing users")

@app.get("/users/{user_id}")
async def get_user(
    user_id: str,
    db: Session = Depends(get_db),
    user: dict = Depends(require_read_access)
):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    try:
        db_user = db.query(User).filter(User.user_id == user_id).first()
        if not db_user:
            raise HTTPException(status_code=404, detail="User not found")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        user_stats = get_user_stats(db, user_id)
        
        return {
            "user_id": db_user.user_id,
            "name": db_user.name,
            "email": db_user.email,
            "is_active": db_user.is_active,
            "created_at": db_user.created_at,
            "updated_at": db_user.updated_at,
            "stats": user_stats
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error getting user: {str(e)}")
        raise HTTPException(status_code=500, detail="Error getting user")

# ==================== ANALYTICS ENDPOINTS ====================

@app.get("/stats/dau")
async def get_dau(
    from_date: str,
    to_date: str,
    db: Session = Depends(get_db),
    user: dict = Depends(require_read_access)
) -> AnalyticsResponse:
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è DAU (Daily Active Users) —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    - –í–∏–º–∞–≥–∞—î –ø—Ä–∞–≤–∞ **read**
    - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: from_date, to_date (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD)
    """
    try:
        result = await get_dau_stats(db, from_date, to_date)
        return AnalyticsResponse(data=result)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        logger.error(f"Error calculating DAU: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/stats/top-events")
async def get_top_events_stats(
    from_date: str,
    to_date: str,
    limit: int = 10,
    db: Session = Depends(get_db),
    user: dict = Depends(require_read_access)
) -> AnalyticsResponse:
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø—É –ø–æ–¥—ñ–π –∑–∞ —á–∞—Å—Ç–æ—Ç–æ—é
    
    - –í–∏–º–∞–≥–∞—î –ø—Ä–∞–≤–∞ **read**
    - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: from_date, to_date, limit
    """
    try:
        result = await get_top_events(db, from_date, to_date, limit)
        return AnalyticsResponse(data=result)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        logger.error(f"Error calculating top events: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/stats/retention")
async def get_retention(
    start_date: str,
    windows: int = 7,
    db: Session = Depends(get_db),
    user: dict = Depends(require_read_access)
) -> AnalyticsResponse:
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ç–µ–Ω—à–µ–Ω–∞
    
    - –í–∏–º–∞–≥–∞—î –ø—Ä–∞–≤–∞ **read**
    - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: start_date (–¥–∞—Ç–∞ –∫–æ–≥–æ—Ä—Ç—ã), windows (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π)
    """
    try:
        result = await get_retention_stats(db, start_date, windows)
        return AnalyticsResponse(data=result)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        logger.error(f"Error calculating retention: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/cohorts/active")
async def get_active_cohorts(
    limit: int = Query(10, ge=1, le=50),
    db: Session = Depends(get_db),
    user: dict = Depends(require_read_access)
):
    """–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–≥–æ—Ä—Ç"""
    try:
        cohorts = await get_cohorts_list(db, limit)
        return {"cohorts": cohorts}
    except Exception as e:
        logger.error(f"Error getting active cohorts: {str(e)}")
        raise HTTPException(status_code=500, detail="Error getting cohorts")

@app.get("/users/{user_id}/retention")
async def get_user_retention(
    user_id: str,
    db: Session = Depends(get_db),
    user: dict = Depends(require_read_access)
):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ç–µ–Ω—à–µ–Ω–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        stats = await get_user_retention_data(db, user_id)
        if "error" in stats:
            raise HTTPException(status_code=404, detail=stats["error"])
        return stats
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error getting user retention: {str(e)}")
        raise HTTPException(status_code=500, detail="Error getting user retention")

# ==================== NATS ENDPOINTS ====================

@app.get("/nats/status")
async def get_nats_status():
    """–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NATS"""
    nats_enabled = getattr(app.state, 'nats_enabled', False)
    return {
        "nats_enabled": nats_enabled,
        "status": "connected" if nats_enabled else "disconnected"
    }

@app.post("/nats/publish-test")
async def publish_test_message(
    message: str = Query("Test message from API"),
    user: dict = Depends(require_admin_access)
):
    """–¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ NATS"""
    try:
        from .nats_client import nats_client
        
        if not nats_client.is_connected:
            raise HTTPException(status_code=503, detail="NATS not connected")
        
        test_event = {
            "event_id": str(uuid.uuid4()),
            "occurred_at": datetime.now(timezone.utc).isoformat(),
            "user_id": user['user_id'],
            "event_type": "test_message",
            "message": message,
            "published_at": datetime.now(timezone.utc).isoformat()
        }
        
        success = await nats_client.publish_event("test.messages", test_event)
        
        if success:
            return {
                "message": "‚úÖ Test message published to NATS",
                "subject": "test.messages",
                "event_id": test_event["event_id"]
            }
        else:
            raise HTTPException(status_code=500, detail="Failed to publish message")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error publishing test message: {str(e)}")
        raise HTTPException(status_code=500, detail="Error publishing test message")

# ==================== AUTH ENDPOINTS ====================

@app.post("/auth/generate-key", status_code=201, response_model=GenerateAPIKeyResponse)
async def generate_api_key(
    request: GenerateAPIKeyRequest,
    db: Session = Depends(get_db),
    user: dict = Depends(require_admin_access)
) -> GenerateAPIKeyResponse:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ API –∫–ª—é—á–∞
    
    - –í–∏–º–∞–≥–∞—î –ø—Ä–∞–≤–∞ **admin**
    - –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π API –∫–ª—é—á (–ø–æ–∫–∞–∑—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑!)
    """
    try:
        new_key = api_key_manager.generate_key(
            db=db,
            user_id=request.user_id,
            name=request.name,
            permissions=request.permissions,
            expires_days=request.expires_days
        )
        
        logger.info(f"Admin {user['user_id']} generated key for {request.user_id}")
        
        return GenerateAPIKeyResponse(
            api_key=new_key,
            user_id=request.user_id,
            permissions=request.permissions,
            name=request.name,
            expires_days=request.expires_days
        )
    except Exception as e:
        logger.error(f"Error generating API key: {str(e)}")
        raise HTTPException(status_code=500, detail="Error generating API key")

@app.get("/auth/keys", response_model=APIKeyListResponse)
async def list_api_keys(
    user_id: Optional[str] = Query(None, description="Filter by user ID"),
    active_only: bool = Query(True, description="Show only active keys"),
    db: Session = Depends(get_db),
    user: dict = Depends(require_admin_access)
) -> APIKeyListResponse:
    """
    –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö API –∫–ª—é—á—ñ–≤
    
    - –í–∏–º–∞–≥–∞—î –ø—Ä–∞–≤–∞ **admin**
    - –ú–æ–∂–ª–∏–≤–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ user_id —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    """
    try:
        keys_info = api_key_manager.get_all_keys(db, user_id, active_only)
        
        return APIKeyListResponse(
            total_keys=len(keys_info),
            keys=keys_info
        )
    except Exception as e:
        logger.error(f"Error listing API keys: {str(e)}")
        raise HTTPException(status_code=500, detail="Error listing API keys")

@app.post("/auth/create-admin-key")
async def create_admin_key(
    db: Session = Depends(get_db)
):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ –∞–¥–º—ñ–Ω –∫–ª—é—á–∞ (–Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó)"""
    try:
        logger.info("Starting admin key creation process...")
        
        # üîß –ù–ê–î–ï–ñ–ù–´–ô –í–ê–†–ò–ê–ù–¢ - —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤ Python
        all_active_keys = db.query(APIKey).filter(APIKey.is_active == True).all()
        existing_admin_keys = 0
        
        for key in all_active_keys:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ JSON –ø–æ–ª—è
            if key.permissions and isinstance(key.permissions, list):
                if 'admin' in key.permissions:
                    existing_admin_keys += 1
                    logger.info(f"Found admin key: {key.name} for user {key.user_id}")
            else:
                logger.warning(f"Key {key.id} has invalid permissions format: {key.permissions}")
        
        logger.info(f"Total found {existing_admin_keys} existing admin keys")
        
        if existing_admin_keys > 0:
            logger.warning("Admin keys already exist, rejecting creation request")
            raise HTTPException(
                status_code=400, 
                detail="Admin keys already exist. Use regular key generation with admin access."
            )
        
        logger.info("No existing admin keys found, proceeding with creation...")
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω –∫–ª—é—á
        admin_key = api_key_manager.generate_key(
            db=db,
            user_id="system_admin",
            name="Initial System Admin Key",
            permissions=["read", "write", "admin"],
            expires_days=365
        )
        
        logger.info("‚úÖ Initial admin key created successfully")
        
        return {
            "message": "‚úÖ Initial admin key created successfully",
            "api_key": admin_key,
            "warning": "‚ö†Ô∏è Save this key securely! It will not be shown again.",
            "user_id": "system_admin",
            "permissions": ["read", "write", "admin"],
            "expires_in_days": 365
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error creating admin key: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="Error creating admin key")

@app.post("/auth/create-user-key")
async def create_user_key(
    user_id: str = Query(..., description="User ID for the new key"),
    key_name: str = Query(..., description="Name for the new key"),
    permissions: List[str] = Query(..., description="List of permissions"),
    expires_days: int = Query(30, description="Key expiration in days"),
    db: Session = Depends(get_db),
    admin_user: dict = Depends(require_admin_access)
):
    """
    –®–≤–∏–¥–∫–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ query parameters
    
    - –í–∏–º–∞–≥–∞—î –ø—Ä–∞–≤–∞ **admin**
    - –ó—Ä—É—á–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—é—á—ñ–≤
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è permissions
        valid_permissions = ["read", "write", "admin"]
        for perm in permissions:
            if perm not in valid_permissions:
                raise HTTPException(
                    status_code=400,
                    detail=f"Invalid permission: {perm}. Valid permissions are: {valid_permissions}"
                )
        
        user_key = api_key_manager.generate_key(
            db=db,
            user_id=user_id,
            name=key_name,
            permissions=permissions,
            expires_days=expires_days
        )

        logger.info(f"Admin {admin_user['user_id']} created key for user {user_id}")

        return {
            "message": "‚úÖ User API key created successfully",
            "api_key": user_key,
            "warning": "‚ö†Ô∏è Save this key securely! It will not be shown again.",
            "user_id": user_id,
            "key_name": key_name,
            "permissions": permissions,
            "expires_in_days": expires_days
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error creating user key: {str(e)}")
        raise HTTPException(status_code=500, detail="Error creating user key")

@app.delete("/auth/keys/{key_id}")
async def revoke_api_key(
    key_id: int,
    db: Session = Depends(get_db),
    user: dict = Depends(require_admin_access)
):
    """
    –í—ñ–¥–∫–ª–∏–∫–∞–Ω–Ω—è API –∫–ª—é—á–∞
    
    - –í–∏–º–∞–≥–∞—î –ø—Ä–∞–≤–∞ **admin**
    - –ö–ª—é—á –ø–æ–∑–Ω–∞—á–∞—î—Ç—å—Å—è —è–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π
    """
    try:
        success = api_key_manager.revoke_key(db, key_id)
        
        if not success:
            raise HTTPException(status_code=404, detail="API key not found")
        
        logger.info(f"Admin {user['user_id']} revoked key ID {key_id}")
        
        return {
            "message": "‚úÖ API key revoked successfully",
            "key_id": key_id
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error revoking API key: {str(e)}")
        raise HTTPException(status_code=500, detail="Error revoking API key")

@app.get("/auth/my-keys", response_model=APIKeyListResponse)
async def get_my_api_keys(
    db: Session = Depends(get_db),
    current_user: dict = Depends(get_current_user)
) -> APIKeyListResponse:
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—é—á—ñ–≤ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    
    - –í–∏–º–∞–≥–∞—î –±—É–¥—å-—è–∫–∏–π –¥—ñ–π—Å–Ω–∏–π API –∫–ª—é—á
    - –ü–æ–≤–µ—Ä—Ç–∞—î —Ç—ñ–ª—å–∫–∏ –∫–ª—é—á—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    """
    try:
        keys_info = api_key_manager.get_user_keys(db, current_user["user_id"])
        
        return APIKeyListResponse(
            total_keys=len(keys_info),
            keys=keys_info
        )
        
    except Exception as e:
        logger.error(f"Error getting user keys: {str(e)}")
        raise HTTPException(status_code=500, detail="Error getting user keys")

# ==================== SYSTEM ENDPOINTS ====================

@app.get("/metrics")
async def metrics(
    user: dict = Depends(require_admin_access)
):
    """Prometheus –º–µ—Ç—Ä–∏–∫–∏"""
    return generate_latest()

@app.get("/health")
async def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏"""
    nats_enabled = getattr(app.state, 'nats_enabled', False)
    return {
        "status": "healthy", 
        "nats_enabled": nats_enabled,
        "services": ["web", "db", "nats"],
        "timestamp": datetime.now(timezone.utc).isoformat()
    }

@app.get("/debug/pool-status")
async def pool_status():
    """–°—Ç–∞—Ç—É—Å –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ë–î"""
    pool = engine.pool
    status = {
        "pool_config": {
            "size": pool.size(),
            "max_overflow": pool._max_overflow,
            "timeout": pool.timeout,
            "recycle": pool._recycle
        },
        "current_usage": {
            "checkedout": pool.checkedout(),  # –ó–∞–Ω—è—Ç—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            "checkedin": pool.checkedin(),    # –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è  
            "overflow": pool.overflow(),      # –°–≤–µ—Ä—Ö –ª–∏–º–∏—Ç–∞
            "total": pool.checkedout() + pool.checkedin()
        },
        "status": "OK" if pool.checkedout() <= (pool.size() + pool._max_overflow) else "OVERLOAD"
    }
    return status

@app.get("/")
async def root():
    """–ö–æ—Ä–µ–Ω–µ–≤–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç"""
    return {
        "message": "Event Analytics Service", 
        "version": "1.0",
        "docs": "/docs",
        "health": "/health"
    }

