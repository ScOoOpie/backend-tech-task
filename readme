10.22.2025
Добавил миграции alembic 
Добавил redis для кэширования

Запуск через 
docker-compose --env-file .env up --build -d
Возможно не сразу применяться миграции в этом случае перезапустите контейнеры

Импорт csv через
python importcsv.py 
(в папке app)



Краткое описание решения
Event Analytics Service - это сервис для сбора и аналитики событий с REST API, построенный на FastAPI и PostgreSQL. Основные функции: прием событий через HTTP, хранение в БД, аналитика в реальном времени, система аутентификации через API ключи и интеграция с NATS для асинхронной обработки.
Redis используется для кэширования частых аналитических запросов, что значительно ускоряет время отклика API.
Alembic используется для управления миграциями базы данных, что обеспечивает легкое обновление схемы БД без потери данных.

Ключевые особенности:

Идемпотентность операций (защита от дубликатов)

Трехуровневая система прав доступа (read/write/admin)

Автоматический расчет метрик (DAU, ретеншен, топ событий)

Поддержка горизонтального масштабирования

Prometheus метрики для мониторинга

Логировние через basiclogging

Кэширования запросов с помощью Redis

Alembic для управления миграциями БД

Почему выбрано это решение
FastAPI - современный, быстрый фреймворк с поддержкой асинхронности, идеально подходит для высоконагруженных API сервисов.
PostgreSQL - надежная реляционная БД с мощными возможностями для аналитики и поддержкой сложных запросов.
NATS - хотелось попробовать новую технологию для обмена сообщениями с низкой задержкой и высокой производительностью.
SQLAlchemy - удобные инструменты для работы с БД, удобно для FastAPI в качестве ORM.
Redis - эффективное кэширование для ускорения частых аналитических запросов.
Возможные альтернативы
Архитектурные альтернативы:

Монолит вместо микросервисов - проще в разработке и деплое, но сложнее масштабировать и поддерживать при росте нагрузки
У меня получился гибридный подход с Event worker и NATS для асинхронной обработки

Технологические альтернативы:

Django вместо FastAPI - больше встроенных возможностей но ниже производительность и сложнее реализовать асинхронность

Flask вместо FastAPI - проще в освоении, но менее производителен и не поддерживает асинхронность из коробки

MongoDB вместо PostgreSQL - проще масштабировать, но сложнее с транзакциями и аналитикой


Плюсы и минусы решения
Плюсы:

Простая и понятная архитектура

Хорошая производительность благодаря connection pooling и индексам

Гибкая система прав доступа

Легко расширяется новыми типами аналитики

Изолированные компоненты (API, worker, БД)

Redis значительно ускоряет частые запросы

Минусы:


PostgreSQL может не справиться с экстремальными нагрузками аналитики (нужно много технических ресурсов, масштабирование сложнее чем у NoSQL)


Требует ручного управления миграциями БД (можно автоматизировать с помощью Alembic)

Опыт работы с NATS: плюсы и минусы
Что изучил при работе с NATS:

Плюсы NATS:

Простота настройки и запуска - один бинарный файл

Очень низкая задержка (latency)

Написано на Go с хорошей производительностью

Автоматическая балансировка нагрузки между consumers

Хорошая документация, было не тяжело разобраться для начала

Минусы NATS:

Новая для меня технология - потребовалось время на изучение

Не популярна как Kafka/Redis - меньше примеров и готовых решений и мне было сложно нарыть информацию на форумах и допросить искусственный интеллект



Вывод по NATS: Отличный выбор для real-time коммуникации между микросервисами. Прост в освоении и использовании, особенно для задач с низкой задержкой. Однако, из-за меньшей популярности может быть сложнее найти поддержку и готовые решения по сравнению с более зрелыми системами как Kafka или Redis.