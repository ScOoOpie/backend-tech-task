import os
import secrets
import hashlib
from datetime import datetime, timedelta, timezone
from fastapi import HTTPException, Depends, Header
from sqlalchemy.orm import Session
from .database import get_db
from .models import APIKey, User
import logging

logger = logging.getLogger(__name__)

class APIKeyManager:
    def __init__(self):
        pass
    
    def _hash_key(self, api_key: str) -> str:
        """–•–µ—à—É—î API key –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è"""
        return hashlib.sha256(api_key.encode()).hexdigest()
    
    def _get_current_utc_time(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π"""
        return datetime.now(timezone.utc)
    
    def _make_naive_if_needed(self, dt):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç datetime –≤ –Ω–∞–∏–≤–Ω—ã–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        if dt.tzinfo is not None:
            return dt.replace(tzinfo=None)
        return dt
    
    def validate_key(self, db: Session, api_key: str, required_permission: str = None) -> dict:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î API key –≤ –ë–î —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        if not api_key:
            raise HTTPException(
                status_code=401, 
                detail="API Key is required"
            )
        
        # –•–µ—à—É—î–º–æ –∫–ª—é—á –¥–ª—è –ø–æ—à—É–∫—É –≤ –ë–î
        key_hash = self._hash_key(api_key)
        
        # –®—É–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª—é—á –≤ –ë–î
        db_key = db.query(APIKey).filter(
            APIKey.key_hash == key_hash,
            APIKey.is_active == True
        ).first()
        
        if not db_key:
            logger.warning(f"Invalid API key attempt: {key_hash[:16]}...")
            raise HTTPException(
                status_code=401, 
                detail="Invalid API Key"
            )
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        current_time = self._get_current_utc_time()
        
        if db_key.expires_at:
            # –ü—Ä–∏–≤–æ–¥–∏–º –æ–±–∞ –≤—Ä–µ–º–µ–Ω–∏ –∫ –æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            expires_at_naive = self._make_naive_if_needed(db_key.expires_at)
            current_time_naive = self._make_naive_if_needed(current_time)
            
            if expires_at_naive < current_time_naive:
                logger.warning(f"Expired API key used: {db_key.name}")
                raise HTTPException(
                    status_code=401,
                    detail="API Key has expired"
                )
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º last_used
        db_key.last_used = self._make_naive_if_needed(current_time)
        db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        db_user = db.query(User).filter(User.user_id == db_key.user_id).first()
        
        user_info = {
            "user_id": db_key.user_id,
            "user_name": db_user.name if db_user else db_key.user_id,
            "permissions": db_key.permissions or [],
            "key_name": db_key.name,
            "key_id": db_key.id
        }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
        if required_permission and required_permission not in user_info["permissions"]:
            logger.warning(
                f"Permission denied for user {db_key.user_id}. "
                f"Required: {required_permission}, Has: {user_info['permissions']}"
            )
            raise HTTPException(
                status_code=403,
                detail=f"Permission denied. Required: {required_permission}"
            )
        
        logger.info(f"Authenticated user: {db_key.user_id} with key: {db_key.name}")
        return user_info
    
    def generate_key(self, db: Session, user_id: str, name: str, permissions: list, expires_days: int = None) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –Ω–æ–≤–∏–π API key —ñ –∑–±–µ—Ä—ñ–≥–∞—î –≤ –ë–î"""
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–ª—é—á
        new_key = secrets.token_urlsafe(32)
        key_hash = self._hash_key(new_key)
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        current_time = self._get_current_utc_time()
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó
        expires_at = None
        if expires_days:
            expires_at = self._make_naive_if_needed(current_time + timedelta(days=expires_days))
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –≤ –ë–î
        db_key = APIKey(
            key_hash=key_hash,
            user_id=user_id,
            name=name,
            permissions=permissions,
            expires_at=expires_at
        )
        
        db.add(db_key)
        db.commit()
        
        logger.info(f"Generated new API key for user: {user_id}, name: {name}")
        
        return new_key
    
    def revoke_key(self, db: Session, key_id: int) -> bool:
        """–í—ñ–¥–∫–ª–∏–∫–∞—î API key –ø–æ ID"""
        db_key = db.query(APIKey).filter(APIKey.id == key_id).first()
        if db_key:
            db_key.is_active = False
            db.commit()
            logger.info(f"Revoked API key: {db_key.name} for user: {db_key.user_id}")
            return True
        return False
    
    def get_user_keys(self, db: Session, user_id: str) -> list:
        """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –∫–ª—é—á—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–±–µ–∑ —Ö–µ—à—ñ–≤)"""
        keys = db.query(APIKey).filter(
            APIKey.user_id == user_id
        ).order_by(APIKey.created_at.desc()).all()
        
        return [
            {
                "id": key.id,
                "user_id": key.user_id,  # üîß –î–û–ë–ê–í–õ–ï–ù–û
                "name": key.name,
                "permissions": key.permissions,
                "is_active": key.is_active,
                "created_at": key.created_at,
                "expires_at": key.expires_at,
                "last_used": key.last_used,
                "key_preview": f"{key.key_hash[:8]}...{key.key_hash[-4:]}" if key.key_hash else "N/A"  # üîß –î–û–ë–ê–í–õ–ï–ù–û
            }
            for key in keys
        ]

    def get_all_keys(self, db: Session, user_id: str = None, active_only: bool = True) -> list:
        """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –∫–ª—é—á—ñ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é"""
        query = db.query(APIKey)
        
        if user_id:
            query = query.filter(APIKey.user_id == user_id)
        
        if active_only:
            query = query.filter(APIKey.is_active == True)
        
        keys = query.order_by(APIKey.created_at.desc()).all()
        
        return [
            {
                "id": key.id,
                "user_id": key.user_id,
                "name": key.name,
                "permissions": key.permissions,
                "is_active": key.is_active,
                "created_at": key.created_at,
                "expires_at": key.expires_at,
                "last_used": key.last_used,
                "key_preview": f"{key.key_hash[:8]}...{key.key_hash[-4:]}" if key.key_hash else "N/A"
            }
            for key in keys
        ]
# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–ª—é—á—ñ–≤
api_key_manager = APIKeyManager()

# Dependency –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
async def get_current_user(
    x_api_key: str = Header(..., alias="X-API-Key"),
    db: Session = Depends(get_db)
) -> dict:
    """
    Dependency –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ API Key
    """
    try:
        user_info = api_key_manager.validate_key(db, x_api_key)
        return user_info
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Authentication error: {str(e)}")
        raise HTTPException(status_code=500, detail="Authentication service error")

# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤
async def require_permission(required_permission: str, user: dict = Depends(get_current_user)):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø—Ä–∞–≤–∞"""
    if required_permission not in user["permissions"]:
        raise HTTPException(
            status_code=403,
            detail=f"Permission denied. Required: {required_permission}"
        )
    return user

# –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ dependencies
async def require_write_access(user: dict = Depends(get_current_user)):
    return await require_permission("write", user)

async def require_read_access(user: dict = Depends(get_current_user)):
    return await require_permission("read", user)

async def require_admin_access(user: dict = Depends(get_current_user)):
    return await require_permission("admin", user)