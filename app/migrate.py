# app/migrate.py
import os
import sys
import logging
from alembic.config import Config
from alembic import command
from alembic.script import ScriptDirectory
from sqlalchemy import create_engine, text

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_pending_migrations():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –Ω–µ–ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    try:
        database_url = os.getenv("DATABASE_URL")
        alembic_cfg = Config("alembic.ini")
        alembic_cfg.set_main_option("sqlalchemy.url", database_url)
        
        # –ü–æ–ª—É—á–∞–µ–º head –≤–µ—Ä—Å–∏—é –∏–∑ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π
        script = ScriptDirectory.from_config(alembic_cfg)
        head_rev = script.get_current_head()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –ë–î
        engine = create_engine(database_url)
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ alembic_version
            result = conn.execute(text("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'alembic_version'
                );
            """))
            alembic_table_exists = result.scalar()
            
            if not alembic_table_exists:
                logger.info("üìù First time setup - alembic_version table doesn't exist")
                return True
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
            result = conn.execute(text("SELECT version_num FROM alembic_version"))
            current_rev = result.scalar()
            
            logger.info(f"üìä Migration status: current={current_rev}, head={head_rev}")
            
            # –ï—Å–ª–∏ —Ä–µ–≤–∏–∑–∏–∏ —Ä–∞–∑–Ω—ã–µ - –µ—Å—Ç—å pending –º–∏–≥—Ä–∞—Ü–∏–∏
            return current_rev != head_rev
            
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Could not check migration status: {e}")
        return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω—ã

def run_migrations():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ Alembic —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å"""
    try:
        logger.info("üîç Checking database migrations...")
        
        # –ü–æ–ª—É—á–∞–µ–º URL –ë–î –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        database_url = os.getenv("DATABASE_URL")
        if not database_url:
            logger.error("‚ùå DATABASE_URL environment variable is not set")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ pending –º–∏–≥—Ä–∞—Ü–∏–∏
        if not get_pending_migrations():
            logger.info("‚úÖ Database is already up to date - no migrations needed")
            return True
        
        logger.info("üì¶ Applying pending migrations...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ Alembic
        alembic_cfg = Config("alembic.ini")
        alembic_cfg.set_main_option("sqlalchemy.url", database_url)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        command.upgrade(alembic_cfg, "head")
        
        logger.info("‚úÖ Database migrations applied successfully")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Database migrations failed: {e}")
        return False

if __name__ == "__main__":
    success = run_migrations()
    sys.exit(0 if success else 1)